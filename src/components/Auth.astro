---
---

<div class="flex items-center" id="auth-container">
  <div class="loading-state">
    <div class="animate-pulse h-8 w-24 bg-gray-200 rounded"></div>
  </div>
</div>

<script>
  import { initAuth0Client } from '../lib/auth';

  async function initializeAuth() {
    try {
      const auth0 = await initAuth0Client();

      // Check if we're handling a callback
      const query = window.location.search;
      if (query.includes('error=')) {
        const errorParam = new URLSearchParams(query).get('error');
        if (errorParam) {
          console.error('Auth error:', errorParam);
          window.history.replaceState({}, document.title, window.location.pathname);
        }
      }

      const user = await auth0.getUser();
      const isAuthenticated = !!user;
      
      const container = document.getElementById('auth-container');
      if (!container) return;

      if (isAuthenticated && user) {
        container.innerHTML = `
          <div class="relative" id="userMenu">
            <button
              type="button"
              class="flex items-center gap-2 text-sm rounded-full focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500"
              id="userMenuButton"
              aria-expanded="false"
              aria-haspopup="true"
            >
              <span class="sr-only">Open user menu</span>
              <img class="h-8 w-8 rounded-full" src="${user.picture}" alt="${user.name}" />
              <span class="text-gray-700 hidden sm:inline-block">${user.name}</span>
            </button>

            <div
              id="userMenuItems"
              class="hidden origin-top-right absolute right-0 mt-2 w-48 rounded-md shadow-lg py-1 bg-white ring-1 ring-black ring-opacity-5 focus:outline-none"
              role="menu"
              aria-orientation="vertical"
              aria-labelledby="userMenuButton"
              tabindex="-1"
            >
              <a
                href="/settings"
                class="block px-4 py-2 text-sm text-gray-700 hover:bg-gray-100"
                role="menuitem"
                tabindex="-1"
              >
                Settings
              </a>
              <form action="/api/auth/logout" method="POST" class="block w-full">
                <button
                  type="submit"
                  class="block w-full text-left px-4 py-2 text-sm text-gray-700 hover:bg-gray-100"
                  role="menuitem"
                  tabindex="-1"
                >
                  Sign out
                </button>
              </form>
            </div>
          </div>
        `;
      } else {
        container.innerHTML = `
          <div class="flex gap-4">
            <button
              type="button"
              id="signupButton"
              class="inline-flex items-center px-4 py-2 border border-transparent text-sm font-medium rounded-md text-white bg-indigo-600 hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500"
            >
              Sign Up
            </button>
            <button
              type="button"
              id="loginButton"
              class="inline-flex items-center px-4 py-2 border border-indigo-600 text-sm font-medium rounded-md text-indigo-600 bg-white hover:bg-indigo-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500"
            >
              Log In
            </button>
          </div>
        `;

        // Handle signup
        const signupButton = document.getElementById('signupButton');
        signupButton?.addEventListener('click', async (event) => {
          event.preventDefault();
          const button = event.currentTarget as HTMLButtonElement;
          
          try {
            button.disabled = true;
            button.innerHTML = `
              <svg class="animate-spin -ml-1 mr-3 h-5 w-5 text-white" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
                <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
                <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
              </svg>
              Signing up...
            `;

            await auth0.loginWithRedirect({
              appState: { returnTo: window.location.pathname },
              screen_hint: 'signup'
            });
          } catch (error) {
            console.error('Signup error:', error);
            button.disabled = false;
            button.innerHTML = 'Sign Up';
            const errorDiv = document.createElement('div');
            errorDiv.className = 'text-red-600 text-sm mt-2';
            errorDiv.textContent = 'Failed to sign up. Please try again.';
            button.parentElement?.appendChild(errorDiv);
          }
        });

        // Handle login
        const loginButton = document.getElementById('loginButton');
        loginButton?.addEventListener('click', async (event) => {
          event.preventDefault();
          const button = event.currentTarget as HTMLButtonElement;
          
          try {
            button.disabled = true;
            button.innerHTML = `
              <svg class="animate-spin -ml-1 mr-3 h-5 w-5 text-indigo-600" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
                <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
                <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
              </svg>
              Logging in...
            `;

            await auth0.loginWithRedirect({
              appState: { returnTo: window.location.pathname }
            });
          } catch (error) {
            console.error('Login error:', error);
            button.disabled = false;
            button.innerHTML = 'Log In';
            const errorDiv = document.createElement('div');
            errorDiv.className = 'text-red-600 text-sm mt-2';
            errorDiv.textContent = 'Failed to log in. Please try again.';
            button.parentElement?.appendChild(errorDiv);
          }
        });
      }

      // Re-initialize event listeners for authenticated user menu
      if (isAuthenticated) {
        initializeEventListeners();
      }
    } catch (error) {
      console.error('Failed to initialize auth:', error);
      const container = document.getElementById('auth-container');
      if (container) {
        container.innerHTML = `
          <div class="text-red-600">
            <button
              type="button"
              id="retryButton"
              class="inline-flex items-center px-4 py-2 border border-transparent text-sm font-medium rounded-md text-white bg-indigo-600 hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500"
            >
              Retry
            </button>
          </div>
        `;
        
        document.getElementById('retryButton')?.addEventListener('click', () => {
          window.location.reload();
        });
      }
    }
  }

  function initializeEventListeners() {
    const userMenuButton = document.getElementById('userMenuButton');
    const userMenuItems = document.getElementById('userMenuItems');
    const userMenu = document.getElementById('userMenu');

    function closeUserMenu() {
      userMenuItems?.classList.add('hidden');
      userMenuButton?.setAttribute('aria-expanded', 'false');
    }

    userMenuButton?.addEventListener('click', (event) => {
      event.stopPropagation();
      const isHidden = userMenuItems?.classList.contains('hidden');
      if (isHidden) {
        userMenuItems?.classList.remove('hidden');
        userMenuButton.setAttribute('aria-expanded', 'true');
      } else {
        closeUserMenu();
      }
    });

    // Close menu when clicking outside
    document.addEventListener('click', (event) => {
      if (!userMenu?.contains(event.target as Node)) {
        closeUserMenu();
      }
    });

    // Close menu on escape key
    document.addEventListener('keydown', (event) => {
      if (event.key === 'Escape') {
        closeUserMenu();
      }
    });
  }

  // Initialize auth when the component mounts
  initializeAuth();
</script>